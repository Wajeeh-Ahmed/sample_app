name: Spring Boot CI/CD with custom image
on:
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build-custom-runner-image:
    runs-on: ubuntu-latest
    outputs:
      custom_image_name: ${{ steps.image_build.outputs.full_image_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Uses your GitHub username
          password: ${{ secrets.GITHUB_TOKEN }} # Uses the automatically generated token

      - name: Build and Push Custom Runner Image
        id: image_build # Give this step an ID to reference its outputs
        uses: docker/build-push-action@v5
        with:
          context: . # Looks for Dockerfile in the current directory (project root)
          push: true
          # Tag the image with the short SHA for uniqueness and 'latest' for convenience
          tags: |
            ghcr.io/${{ github.repository }}/custom-java-runner:${{ github.sha }}
            ghcr.io/${{ github.repository }}/custom-java-runner:latest
          # Cache layers to speed up rebuilds
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 2: Build and Test the Spring Boot Application using the custom image
  build-and-test-application:
    runs-on: ubuntu-latest
    needs: build-custom-runner-image # Depends on the custom image being built first
    container:
      # Use the output from the previous job to get the custom image name
      image: ${{ needs.build-custom-runner-image.outputs.custom_image_name }}
      options: --user root # Important: running as root inside container for permissions
    steps:
      - name: Checkout Code
        # Checkout the code inside the custom container
        uses: actions/checkout@v4

      - name: Grant execute permission to gradlew
        run: chmod +x gradlew

      - name: Build Spring Boot App
        run: ./gradlew build -x test

      - name: Run Tests
        run: ./gradlew test

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-app
          path: build/libs/*.jar

      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: build/reports/tests/test/

  deploy-application:
    runs-on: ubuntu-latest
    needs: build-and-test-application
    container:
      # Use the same custom image, or you could use a different, smaller custom image for deployment if you built one
      image: ${{ needs.build-custom-runner-image.outputs.custom_image_name }}
      options: --user root # Important: running as root inside container for permissions
    steps:
      - name: Download Application Artifact
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-app
          path: .

      - name: Deploy Application
        run: |
          echo "Deployment started..."
          # Example deployment command (e.g., to a local server, cloud, etc.)
          # Assuming the JAR is in the 'spring-boot-app' directory after download
          ls -l spring-boot-app/ # Verify content
          java -jar spring-boot-app/*.jar # Run your Spring Boot app
          echo "Application deployed."  
